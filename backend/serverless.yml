service: backend
# app and org for use with dashboard.serverless.com
# app: philterphoto
# org: bailsaway

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: PhilterPhotoServerless
  environment:
    ACADEMY_WHITE_BUCKET: academy-white-caterham-motorsport-photos-bucket
    ACADEMY_GREEN_BUCKET: academy-green-caterham-motorsport-photos-bucket
    ROADSPORT_BUCKET: roadsport-caterham-motorsport-photos-bucket
    COMPETITOR_CSV_BUCKET: caterham-competitor-csv-upload-bucket
  region: eu-west-2
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:*"
          Resource:
            - arn:aws:dynamodb:eu-west-2:603758851381:table/CompetitorInfoTable
        - Effect: Allow
          Action:
            - "s3:*"
          Resource:
            - "arn:aws:s3:::roadsport-caterham-motorsport-photos-bucket/*"
            - "arn:aws:s3:::academy-white-caterham-motorsport-photos-bucket/*"
            - "arn:aws:s3:::academy-green-caterham-motorsport-photos-bucket/*"
            - "arn:aws:s3:::caterham-competitor-csv-upload-bucket/*"
        - Effect: Allow
          Action:
            - "rekognition:*"
          Resource: "*"
# plugins:
#   - serverless-s3-sync

# custom:
#   s3Sync:
#     - bucketName: roadsport-caterham-motorsport-photos-bucket
#       localDir: forUpload

functions:
  addCompetitor:
    handler: src/addCompetitor.handler
    events:
      - httpApi:
          path: /
          method: post
  getCompetitors:
    handler: src/getCompetitors.handler
    events:
      - httpApi:
          path: /competitors
          method: get
  getACompetitor:
    handler: src/getACompetitor.handler
    events:
      - httpApi:
          path: /competitor/{id}
          method: get
  updateCompetitor:
    handler: src/updateCompetitor.handler
    events:
      - httpApi:
          path: /competitor/{id}
          method: put
  uploadCSV:
    handler: src/uploadCSV.handler
    events:
      - httpApi:
          path: /csv
          method: post
  csvToDynamodb:
    handler: src/csvToDynamodb.handler
    events:
      - s3:
          bucket: caterham-competitor-csv-upload-bucket
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
          existing: true
  roadsportImagesToRekognition:
    handler: src/roadsportImagesToRekognition.handler
    events:
      - httpApi:
          path: /roadsport
          method: post

# you can add CloudFormation resource templates here
resources:
  Resources:
    CompetitorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CompetitorInfoTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    RoadsportChampionshipBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: roadsport-caterham-motorsport-photos-bucket
    AcademyWhiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: academy-white-caterham-motorsport-photos-bucket
    AcademyGreenBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: academy-green-caterham-motorsport-photos-bucket
    CompetitorCSVUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: caterham-competitor-csv-upload-bucket
    BucketPolicyOne:
      Type: AWS::S3::BucketPolicy
      DependsOn: CompetitorCSVUploadBucket
      Properties:
        Bucket:
          Ref: CompetitorCSVUploadBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: "arn:aws:s3:::caterham-competitor-csv-upload-bucket/*"
